// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: reviews.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Reviews_AddReviewResult: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case success // = 0
  case invalidCourseCode // = 1
  case invalidYearTaken // = 2
  case invalidSemesterTaken // = 3
  case invalidContent // = 4
  case invalidLecturers // = 5
  case invalidRating // = 6
  case errorAlreadyReviewed // = 7
  case errorUserNotTakenCourse // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .success
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 1: self = .invalidCourseCode
    case 2: self = .invalidYearTaken
    case 3: self = .invalidSemesterTaken
    case 4: self = .invalidContent
    case 5: self = .invalidLecturers
    case 6: self = .invalidRating
    case 7: self = .errorAlreadyReviewed
    case 8: self = .errorUserNotTakenCourse
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .success: return 0
    case .invalidCourseCode: return 1
    case .invalidYearTaken: return 2
    case .invalidSemesterTaken: return 3
    case .invalidContent: return 4
    case .invalidLecturers: return 5
    case .invalidRating: return 6
    case .errorAlreadyReviewed: return 7
    case .errorUserNotTakenCourse: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Reviews_AddReviewResult: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Reviews_AddReviewResult] = [
    .success,
    .invalidCourseCode,
    .invalidYearTaken,
    .invalidSemesterTaken,
    .invalidContent,
    .invalidLecturers,
    .invalidRating,
    .errorAlreadyReviewed,
    .errorUserNotTakenCourse,
  ]
}

#endif  // swift(>=4.2)

public enum Reviews_AcademicYear: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ay20182019 // = 0
  case ay20192020 // = 1
  case ay20202021 // = 2
  case ay20212022 // = 3
  case ay20222023 // = 4
  case ay20232024 // = 5
  case ay20242025 // = 6
  case ay20252026 // = 7
  case ay20262027 // = 8
  case ay20272028 // = 9
  case ay20282029 // = 10
  case ay20292030 // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .ay20182019
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ay20182019
    case 1: self = .ay20192020
    case 2: self = .ay20202021
    case 3: self = .ay20212022
    case 4: self = .ay20222023
    case 5: self = .ay20232024
    case 6: self = .ay20242025
    case 7: self = .ay20252026
    case 8: self = .ay20262027
    case 9: self = .ay20272028
    case 10: self = .ay20282029
    case 11: self = .ay20292030
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ay20182019: return 0
    case .ay20192020: return 1
    case .ay20202021: return 2
    case .ay20212022: return 3
    case .ay20222023: return 4
    case .ay20232024: return 5
    case .ay20242025: return 6
    case .ay20252026: return 7
    case .ay20262027: return 8
    case .ay20272028: return 9
    case .ay20282029: return 10
    case .ay20292030: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Reviews_AcademicYear: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Reviews_AcademicYear] = [
    .ay20182019,
    .ay20192020,
    .ay20202021,
    .ay20212022,
    .ay20222023,
    .ay20232024,
    .ay20242025,
    .ay20252026,
    .ay20262027,
    .ay20272028,
    .ay20282029,
    .ay20292030,
  ]
}

#endif  // swift(>=4.2)

public enum Reviews_Semester: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case sem1 // = 0
  case sem2 // = 1
  case summer // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .sem1
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sem1
    case 1: self = .sem2
    case 2: self = .summer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sem1: return 0
    case .sem2: return 1
    case .summer: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Reviews_Semester: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Reviews_Semester] = [
    .sem1,
    .sem2,
    .summer,
  ]
}

#endif  // swift(>=4.2)

public struct Reviews_AddReviewRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseCode: String = String()

  public var yearTaken: Reviews_AcademicYear = .ay20182019

  public var semesterTaken: Reviews_Semester = .sem1

  public var content: String = String()

  public var lecturers: [String] = []

  public var rating: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Reviews_AddReviewResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Reviews_AddReviewResult = .success

  public var errorMessage: String {
    get {return _errorMessage ?? String()}
    set {_errorMessage = newValue}
  }
  /// Returns true if `errorMessage` has been explicitly set.
  public var hasErrorMessage: Bool {return self._errorMessage != nil}
  /// Clears the value of `errorMessage`. Subsequent reads from it will return its default value.
  public mutating func clearErrorMessage() {self._errorMessage = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _errorMessage: String? = nil
}

public struct Reviews_Review {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseCode: String = String()

  public var yearTaken: Reviews_AcademicYear = .ay20182019

  public var semesterTaken: Reviews_Semester = .sem1

  public var content: String = String()

  public var rating: Int32 = 0

  public var lecturers: [String] = []

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Reviews_AddReviewResult: @unchecked Sendable {}
extension Reviews_AcademicYear: @unchecked Sendable {}
extension Reviews_Semester: @unchecked Sendable {}
extension Reviews_AddReviewRequest: @unchecked Sendable {}
extension Reviews_AddReviewResponse: @unchecked Sendable {}
extension Reviews_Review: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "reviews"

extension Reviews_AddReviewResult: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "INVALID_COURSE_CODE"),
    2: .same(proto: "INVALID_YEAR_TAKEN"),
    3: .same(proto: "INVALID_SEMESTER_TAKEN"),
    4: .same(proto: "INVALID_CONTENT"),
    5: .same(proto: "INVALID_LECTURERS"),
    6: .same(proto: "INVALID_RATING"),
    7: .same(proto: "ERROR_ALREADY_REVIEWED"),
    8: .same(proto: "ERROR_USER_NOT_TAKEN_COURSE"),
  ]
}

extension Reviews_AcademicYear: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AY_2018_2019"),
    1: .same(proto: "AY_2019_2020"),
    2: .same(proto: "AY_2020_2021"),
    3: .same(proto: "AY_2021_2022"),
    4: .same(proto: "AY_2022_2023"),
    5: .same(proto: "AY_2023_2024"),
    6: .same(proto: "AY_2024_2025"),
    7: .same(proto: "AY_2025_2026"),
    8: .same(proto: "AY_2026_2027"),
    9: .same(proto: "AY_2027_2028"),
    10: .same(proto: "AY_2028_2029"),
    11: .same(proto: "AY_2029_2030"),
  ]
}

extension Reviews_Semester: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEM1"),
    1: .same(proto: "SEM2"),
    2: .same(proto: "SUMMER"),
  ]
}

extension Reviews_AddReviewRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddReviewRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "course_code"),
    2: .standard(proto: "year_taken"),
    3: .standard(proto: "semester_taken"),
    4: .same(proto: "content"),
    5: .same(proto: "lecturers"),
    6: .same(proto: "rating"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.courseCode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.yearTaken) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.semesterTaken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.lecturers) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.rating) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.courseCode.isEmpty {
      try visitor.visitSingularStringField(value: self.courseCode, fieldNumber: 1)
    }
    if self.yearTaken != .ay20182019 {
      try visitor.visitSingularEnumField(value: self.yearTaken, fieldNumber: 2)
    }
    if self.semesterTaken != .sem1 {
      try visitor.visitSingularEnumField(value: self.semesterTaken, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if !self.lecturers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.lecturers, fieldNumber: 5)
    }
    if self.rating != 0 {
      try visitor.visitSingularInt32Field(value: self.rating, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Reviews_AddReviewRequest, rhs: Reviews_AddReviewRequest) -> Bool {
    if lhs.courseCode != rhs.courseCode {return false}
    if lhs.yearTaken != rhs.yearTaken {return false}
    if lhs.semesterTaken != rhs.semesterTaken {return false}
    if lhs.content != rhs.content {return false}
    if lhs.lecturers != rhs.lecturers {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Reviews_AddReviewResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddReviewResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "error_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._errorMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.result != .success {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try { if let v = self._errorMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Reviews_AddReviewResponse, rhs: Reviews_AddReviewResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._errorMessage != rhs._errorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Reviews_Review: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Review"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "course_code"),
    2: .standard(proto: "year_taken"),
    3: .standard(proto: "semester_taken"),
    4: .same(proto: "content"),
    5: .same(proto: "rating"),
    6: .same(proto: "lecturers"),
    7: .standard(proto: "created_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.courseCode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.yearTaken) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.semesterTaken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.rating) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.lecturers) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.courseCode.isEmpty {
      try visitor.visitSingularStringField(value: self.courseCode, fieldNumber: 1)
    }
    if self.yearTaken != .ay20182019 {
      try visitor.visitSingularEnumField(value: self.yearTaken, fieldNumber: 2)
    }
    if self.semesterTaken != .sem1 {
      try visitor.visitSingularEnumField(value: self.semesterTaken, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if self.rating != 0 {
      try visitor.visitSingularInt32Field(value: self.rating, fieldNumber: 5)
    }
    if !self.lecturers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.lecturers, fieldNumber: 6)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Reviews_Review, rhs: Reviews_Review) -> Bool {
    if lhs.courseCode != rhs.courseCode {return false}
    if lhs.yearTaken != rhs.yearTaken {return false}
    if lhs.semesterTaken != rhs.semesterTaken {return false}
    if lhs.content != rhs.content {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.lecturers != rhs.lecturers {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
