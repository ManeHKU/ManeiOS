//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: init_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Init_InitServiceClient`, then call methods of this protocol to make API calls.
public protocol Init_InitServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Init_InitServiceClientInterceptorFactoryProtocol? { get }

  func getInitialConfig(
    _ request: Init_GetInitialConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Init_GetInitialConfigRequest, Init_GetInitialConfigResponse>

  func getSISTicket(
    _ request: Init_UserSignInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Init_UserSignInRequest, Init_UserSignInResponse>
}

extension Init_InitServiceClientProtocol {
  public var serviceName: String {
    return "init.InitService"
  }

  /// Unary call to GetInitialConfig
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInitialConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInitialConfig(
    _ request: Init_GetInitialConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Init_GetInitialConfigRequest, Init_GetInitialConfigResponse> {
    return self.makeUnaryCall(
      path: Init_InitServiceClientMetadata.Methods.getInitialConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInitialConfigInterceptors() ?? []
    )
  }

  /// Unary call to GetSISTicket
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSISTicket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSISTicket(
    _ request: Init_UserSignInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Init_UserSignInRequest, Init_UserSignInResponse> {
    return self.makeUnaryCall(
      path: Init_InitServiceClientMetadata.Methods.getSISTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSISTicketInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Init_InitServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Init_InitServiceNIOClient")
public final class Init_InitServiceClient: Init_InitServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Init_InitServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Init_InitServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the init.InitService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Init_InitServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Init_InitServiceNIOClient: Init_InitServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Init_InitServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the init.InitService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Init_InitServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Init_InitServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Init_InitServiceClientInterceptorFactoryProtocol? { get }

  func makeGetInitialConfigCall(
    _ request: Init_GetInitialConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Init_GetInitialConfigRequest, Init_GetInitialConfigResponse>

  func makeGetSisticketCall(
    _ request: Init_UserSignInRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Init_UserSignInRequest, Init_UserSignInResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Init_InitServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Init_InitServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Init_InitServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetInitialConfigCall(
    _ request: Init_GetInitialConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Init_GetInitialConfigRequest, Init_GetInitialConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Init_InitServiceClientMetadata.Methods.getInitialConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInitialConfigInterceptors() ?? []
    )
  }

  public func makeGetSisticketCall(
    _ request: Init_UserSignInRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Init_UserSignInRequest, Init_UserSignInResponse> {
    return self.makeAsyncUnaryCall(
      path: Init_InitServiceClientMetadata.Methods.getSISTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSISTicketInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Init_InitServiceAsyncClientProtocol {
  public func getInitialConfig(
    _ request: Init_GetInitialConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Init_GetInitialConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Init_InitServiceClientMetadata.Methods.getInitialConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInitialConfigInterceptors() ?? []
    )
  }

  public func getSISTicket(
    _ request: Init_UserSignInRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Init_UserSignInResponse {
    return try await self.performAsyncUnaryCall(
      path: Init_InitServiceClientMetadata.Methods.getSISTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSISTicketInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Init_InitServiceAsyncClient: Init_InitServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Init_InitServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Init_InitServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Init_InitServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getInitialConfig'.
  func makeGetInitialConfigInterceptors() -> [ClientInterceptor<Init_GetInitialConfigRequest, Init_GetInitialConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'getSISTicket'.
  func makeGetSISTicketInterceptors() -> [ClientInterceptor<Init_UserSignInRequest, Init_UserSignInResponse>]
}

public enum Init_InitServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "InitService",
    fullName: "init.InitService",
    methods: [
      Init_InitServiceClientMetadata.Methods.getInitialConfig,
      Init_InitServiceClientMetadata.Methods.getSISTicket,
    ]
  )

  public enum Methods {
    public static let getInitialConfig = GRPCMethodDescriptor(
      name: "GetInitialConfig",
      path: "/init.InitService/GetInitialConfig",
      type: GRPCCallType.unary
    )

    public static let getSISTicket = GRPCMethodDescriptor(
      name: "GetSISTicket",
      path: "/init.InitService/GetSISTicket",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Init_InitServiceProvider: CallHandlerProvider {
  var interceptors: Init_InitServiceServerInterceptorFactoryProtocol? { get }

  func getInitialConfig(request: Init_GetInitialConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Init_GetInitialConfigResponse>

  func getSISTicket(request: Init_UserSignInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Init_UserSignInResponse>
}

extension Init_InitServiceProvider {
  public var serviceName: Substring {
    return Init_InitServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetInitialConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Init_GetInitialConfigRequest>(),
        responseSerializer: ProtobufSerializer<Init_GetInitialConfigResponse>(),
        interceptors: self.interceptors?.makeGetInitialConfigInterceptors() ?? [],
        userFunction: self.getInitialConfig(request:context:)
      )

    case "GetSISTicket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Init_UserSignInRequest>(),
        responseSerializer: ProtobufSerializer<Init_UserSignInResponse>(),
        interceptors: self.interceptors?.makeGetSISTicketInterceptors() ?? [],
        userFunction: self.getSISTicket(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Init_InitServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Init_InitServiceServerInterceptorFactoryProtocol? { get }

  func getInitialConfig(
    request: Init_GetInitialConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Init_GetInitialConfigResponse

  func getSISTicket(
    request: Init_UserSignInRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Init_UserSignInResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Init_InitServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Init_InitServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Init_InitServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Init_InitServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetInitialConfig":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Init_GetInitialConfigRequest>(),
        responseSerializer: ProtobufSerializer<Init_GetInitialConfigResponse>(),
        interceptors: self.interceptors?.makeGetInitialConfigInterceptors() ?? [],
        wrapping: { try await self.getInitialConfig(request: $0, context: $1) }
      )

    case "GetSISTicket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Init_UserSignInRequest>(),
        responseSerializer: ProtobufSerializer<Init_UserSignInResponse>(),
        interceptors: self.interceptors?.makeGetSISTicketInterceptors() ?? [],
        wrapping: { try await self.getSISTicket(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Init_InitServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getInitialConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInitialConfigInterceptors() -> [ServerInterceptor<Init_GetInitialConfigRequest, Init_GetInitialConfigResponse>]

  /// - Returns: Interceptors to use when handling 'getSISTicket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSISTicketInterceptors() -> [ServerInterceptor<Init_UserSignInRequest, Init_UserSignInResponse>]
}

public enum Init_InitServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "InitService",
    fullName: "init.InitService",
    methods: [
      Init_InitServiceServerMetadata.Methods.getInitialConfig,
      Init_InitServiceServerMetadata.Methods.getSISTicket,
    ]
  )

  public enum Methods {
    public static let getInitialConfig = GRPCMethodDescriptor(
      name: "GetInitialConfig",
      path: "/init.InitService/GetInitialConfig",
      type: GRPCCallType.unary
    )

    public static let getSISTicket = GRPCMethodDescriptor(
      name: "GetSISTicket",
      path: "/init.InitService/GetSISTicket",
      type: GRPCCallType.unary
    )
  }
}
